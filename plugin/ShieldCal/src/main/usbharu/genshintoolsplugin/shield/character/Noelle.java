package usbharu.genshintoolsplugin.shield.character;

import usbharu.genshintools.gui.IContentPane;
import usbharu.genshintoolsplugin.shield.ShieldCal;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ResourceBundle;

public class Noelle implements IContentPane {
	private JPanel contentPane;
	private JFormattedTextField defInput;
	private JFormattedTextField talentsInput;
	private JFormattedTextField increasesInput;
	private JTextField baseShieldInput;
	private JLabel baseShieldLabel;
	private JTextField finalShieldInput;
	private JLabel finalShieldLabel;
	private JCheckBox twoGeoCheck;
	private JTextField dmgAbsorptionPer;
	private JLabel dmgAbsorptionLabel;
	private JTextField dmgAbsorption;
	private JLabel noelleLabel;

	private int shield;

	public Noelle() {
		$$$setupUI$$$();
		defInput.addActionListener(new ActionListener() {
			/**
			 * Invoked when an action occurs.
			 *
			 * @param e the event to be processed
			 */
			@Override
			public void actionPerformed(ActionEvent e) {
				calShield();
				setShield();
				setTalents();
			}
		});
		talentsInput.addActionListener(new ActionListener() {
			/**
			 * Invoked when an action occurs.
			 *
			 * @param e the event to be processed
			 */
			@Override
			public void actionPerformed(ActionEvent e) {
				calShield();
				setShield();
				setTalents();
			}
		});
		increasesInput.addActionListener(new ActionListener() {
			/**
			 * Invoked when an action occurs.
			 *
			 * @param e the event to be processed
			 */
			@Override
			public void actionPerformed(ActionEvent e) {
				calShield();
				setShield();
				setTalents();
			}
		});
		twoGeoCheck.addActionListener(new ActionListener() {
			/**
			 * Invoked when an action occurs.
			 *
			 * @param e the event to be processed
			 */
			@Override
			public void actionPerformed(ActionEvent e) {
				calShield();
				setShield();
				setTalents();
			}
		});
	}

	void calShield() {
		int def = Integer.parseInt(defInput.getText());
		int talents = Integer.parseInt(talentsInput.getText());
		int increases = Integer.parseInt(increasesInput.getText());
		shield = ShieldCal.shieldStrength("noelle", def, talents, increases);
	}

	void setShield() {
		baseShieldInput.setText(String.valueOf(shield));
		float finalShieldStrength = shield;
		if (twoGeoCheck.isSelected()) {
			finalShieldStrength *= 1.5;
		}
		finalShieldInput.setText(String.valueOf(finalShieldStrength));
	}

	void setTalents() {
		dmgAbsorptionPer.setText(String.valueOf(ShieldCal.talentsPercent("noelle", Integer.parseInt(talentsInput.getText()))));
		dmgAbsorption.setText(String.valueOf(ShieldCal.talentsValue("noelle", Integer.parseInt(talentsInput.getText()))));
	}

	@Override
	public JPanel getContentPane() {
		return contentPane;
	}

	@Override
	public String getName() {
		return "Noelle";
	}


	/**
	 * Returns a string representation of the object. In general, the
	 * {@code toString} method returns a string that
	 * "textually represents" this object. The result should
	 * be a concise but informative representation that is easy for a
	 * person to read.
	 * It is recommended that all subclasses override this method.
	 * <p>
	 * The {@code toString} method for class {@code Object}
	 * returns a string consisting of the name of the class of which the
	 * object is an instance, the at-sign character `{@code @}', and
	 * the unsigned hexadecimal representation of the hash code of the
	 * object. In other words, this method returns a string equal to the
	 * value of:
	 * <blockquote>
	 * <pre>
	 * getClass().getName() + '@' + Integer.toHexString(hashCode())
	 * </pre></blockquote>
	 *
	 * @return a string representation of the object.
	 */
	@Override
	public String toString() {
		return "Noelle";
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		createUIComponents();
		contentPane = new JPanel();
		contentPane.setLayout(new GridBagLayout());
		GridBagConstraints gbc;
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 0;
		gbc.anchor = GridBagConstraints.WEST;
		contentPane.add(noelleLabel, gbc);
		final JPanel spacer1 = new JPanel();
		gbc = new GridBagConstraints();
		gbc.gridx = 2;
		gbc.gridy = 0;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		contentPane.add(spacer1, gbc);
		final JLabel label1 = new JLabel();
		label1.setText("DEF");
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 1;
		gbc.anchor = GridBagConstraints.WEST;
		contentPane.add(label1, gbc);
		defInput = new JFormattedTextField();
		defInput.setColumns(4);
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 1;
		gbc.anchor = GridBagConstraints.WEST;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		contentPane.add(defInput, gbc);
		final JLabel label2 = new JLabel();
		label2.setText("Talents");
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 2;
		gbc.anchor = GridBagConstraints.WEST;
		contentPane.add(label2, gbc);
		talentsInput = new JFormattedTextField();
		talentsInput.setColumns(2);
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 2;
		gbc.anchor = GridBagConstraints.WEST;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		contentPane.add(talentsInput, gbc);
		final JLabel label3 = new JLabel();
		label3.setText("Shield Increases");
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 3;
		gbc.anchor = GridBagConstraints.WEST;
		contentPane.add(label3, gbc);
		increasesInput = new JFormattedTextField();
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 3;
		gbc.anchor = GridBagConstraints.WEST;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		contentPane.add(increasesInput, gbc);
		baseShieldLabel = new JLabel();
		baseShieldLabel.setText("base Shield");
		gbc = new GridBagConstraints();
		gbc.gridx = 3;
		gbc.gridy = 1;
		gbc.anchor = GridBagConstraints.WEST;
		contentPane.add(baseShieldLabel, gbc);
		baseShieldInput = new JTextField();
		baseShieldInput.setColumns(8);
		baseShieldInput.setEditable(false);
		gbc = new GridBagConstraints();
		gbc.gridx = 4;
		gbc.gridy = 1;
		gbc.anchor = GridBagConstraints.WEST;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		contentPane.add(baseShieldInput, gbc);
		finalShieldInput = new JTextField();
		finalShieldInput.setColumns(8);
		finalShieldInput.setEditable(false);
		gbc = new GridBagConstraints();
		gbc.gridx = 4;
		gbc.gridy = 2;
		gbc.anchor = GridBagConstraints.WEST;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		contentPane.add(finalShieldInput, gbc);
		finalShieldLabel = new JLabel();
		finalShieldLabel.setText("final Shield");
		gbc = new GridBagConstraints();
		gbc.gridx = 3;
		gbc.gridy = 2;
		gbc.anchor = GridBagConstraints.WEST;
		contentPane.add(finalShieldLabel, gbc);
		final JLabel label4 = new JLabel();
		label4.setText("2 GEO Character");
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 4;
		gbc.anchor = GridBagConstraints.WEST;
		contentPane.add(label4, gbc);
		twoGeoCheck = new JCheckBox();
		twoGeoCheck.setText("");
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 4;
		contentPane.add(twoGeoCheck, gbc);
		dmgAbsorptionPer = new JTextField();
		dmgAbsorptionPer.setEditable(false);
		gbc = new GridBagConstraints();
		gbc.gridx = 4;
		gbc.gridy = 4;
		gbc.anchor = GridBagConstraints.WEST;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		contentPane.add(dmgAbsorptionPer, gbc);
		dmgAbsorptionLabel = new JLabel();
		dmgAbsorptionLabel.setText("DMG Absorption(%)");
		gbc = new GridBagConstraints();
		gbc.gridx = 3;
		gbc.gridy = 4;
		gbc.anchor = GridBagConstraints.WEST;
		contentPane.add(dmgAbsorptionLabel, gbc);
		final JLabel label5 = new JLabel();
		label5.setText("DMG Absorption");
		gbc = new GridBagConstraints();
		gbc.gridx = 3;
		gbc.gridy = 5;
		gbc.anchor = GridBagConstraints.WEST;
		contentPane.add(label5, gbc);
		dmgAbsorption = new JTextField();
		dmgAbsorption.setEditable(false);
		gbc = new GridBagConstraints();
		gbc.gridx = 4;
		gbc.gridy = 5;
		gbc.anchor = GridBagConstraints.WEST;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		contentPane.add(dmgAbsorption, gbc);
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$() {
		return contentPane;
	}

	private void createUIComponents() {
		ResourceBundle resourceBundle = ResourceBundle.getBundle("resource.Noelle");
		noelleLabel = new JLabel(resourceBundle.getString("nameLang"));
	}
}